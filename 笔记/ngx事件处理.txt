事件模块
  nginx是一个事件驱动架构的web服务器
  ngx_event_t 事件 和 ngx_connection_t连接是处理TCP连接的基础数据，
  ngx_events_module事件模块， 
  ngx_event_core_module  ->   ngx_epoll_module模块

  nginx定时器是由红黑树ngx_rbtree_t实现的，

  ngx_process_events_and_timer方法处理网络事件、定时器事件和post事件的完整流程。



启动时调用ngx_init_cycle方法解析配置项。一旦在nginx.conf配置文件中找到ngx_event_module感兴趣的"event{}"配置项， 

	
	ngx_handler_read_event:
		将读事件添加到事件驱动模块中，这样该事件对应的TCP一担出现可读事件，就会调用该方法


ngx_connection_t连接池
	nginx在接收客户端连接时，所使用的ngx_connect_t结构体在启动阶段就分配好的，使用时从连接池获取即可。
	每一个连接一定至少需要一个读事件和一个写事件

	每个核心模块结构体  ngx_core_module_t都需要实现， HTTP模块实现ngx_http_module_t 8个参数解析方法。
	这里event没有关心参数。

	post事件
	允许事件延后执行， nginx设计两个post队列，一个是监听连接的读事件构成的ngx_post_accept_event队列和一个是ngx_posted_events队列

文件异步I/O
	linux内核提供函数
		int io_setup(unsigned nr_event, aio_content_t *ctxp)
		int io_destroy(aio_content_t ctx)  ctx是文件异步I/O的上下文描述符
		int io_submit(aio_content_t ctx, long nr, struct iocb *cbp[]);
			提交文件文件异步IO
		int io_cancel(aio_content_t ctx, struct iocb *iocb, struct ip_event *result);
		int io_getevents(aio_content_t, long main_nr, long nr, struct io_event *event,
						struct timesec *timeout);

		struct iocb {
			//存储着业务需要的指针，在nginx中这个字段存储着对于的ngx_event_t事件，与io_getevents方法中返回的io_event结构体的data成员是完全一致的。
			u_int64_t aio_data;

			u_int32_t PADDED(aio_key, aio_reservedl);
			u_int16_t aio_lio_opcode;
			int16_t aio_reqprio;
			u_int32_t aio_files;
			u_int64_t aio_buf;
			u_int64_t aio_nbytes;
			u_int64_t aio_offset;
			u_int64_t aio_reserveds;
			u_in32_t aio_flags
			u_int32_t aio_resfd;
		};

		struct io_event {
			uint64_t data;
			uint64_t obj;
			int64_t res;
			int64_t res2;
		};
		


	