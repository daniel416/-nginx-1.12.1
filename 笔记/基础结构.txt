整型：
	ngx_int_t封装有符号整型
	ngx_uint_t封装无符号整型
字符串：
	ngx_str_t 结构就是字符串
	typeded struct {
		size_t len;
		u_char *data;
	} ngx_str_t;
	data指针指向字符串起始地址，不一定是以\0结尾
	len表示有效长度，

	if (0 == ngx_strncmp(r->method_name.data, "PUT", r->method_name.len))
	使用时可能导致内存越界， 使用ngx_str_t可以有效降低内存使用量。
链表：
	typedef struct ngx_list_part_s ngx_list_part_t;

	struct ngx_list_part_s {
		void *elts;
		ngx_uint_t nelts;
		ngx_list_part_t *next;
	};

	typedef struct {
		ngx_list_part_t *last;
		ngx_list_part_t  part;
		size_t size;
		ngx_uint_t nalloc;
		ngx_pool_t *pool;
	} ngx_list_t;
	ngx_list_t描述整个链表， 而ngx_list_part_t值描述链表的一个元素，
	ngx_list_part_t 又是一个数组，拥有连续的内存，ngx_list_t里面的size和nalloc来表示数组的容量，同时又依靠每个ngx_list_part_t成员中的nelts表示数组当前使用了多少容量。
	 	链表存储的元素是灵活的，可以试任何一种数据结构
	 	ngx_list_t管理内存
	 	小块内存使用链表访问效率低下。

	 	size限制每个数组元素占用的空间大小，用户要存储的一个数据所占用的字节数必须小于或等于size。
	 	nalloc：链表的数组元素一旦分配后是不可更改的。 ngx_list_part_t 数组容量
	 	pool:连边中管理内存分配的内存池对象
	 	ngx_list_create 接口用于创建新的链表
	 	ngx_list_init初始化一个已有的链表
	 	ngx_list_push 添加新元素

	 ngx_list_t *ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size);
	 static ngx_inline ngx_int_t
	 ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size);
	 void *ngx_list_push(ngx_list_t *list);


	 使用
	 	ngx_list_t testlist = ngx_list_create(r->pool, 4, sizeof(ngx_str_t))
	 	if (testlist == NULL) {
	 		return NGX_ERROR;
	 	}
	 	ngx_str_t* str = ngx_list_push(testlist);
	 	if (str == NULL) {
	 		return NGX_ERROR;
	 	}
	 	str->len = sizeof("Hello world");
	 	str->value = "Hello world";

	遍历
		ngx_list_part_t* part = &testlist.part;
		ngx_str_t* str = part->elts;

		for (i = 0; ; i++) {
			if(i >= part->nelts) {
				if (part->next == NULL) {
					break;
				}
				part = part->next;
				header = part->elts;
				i = 0;
			}
			printf("list element %d %s\n", str[i].len, str[i].data)
		}

ngx_table_elt_t

	typedef struct {
		ngx_uint_t hash;
		ngx_str_t key;
		ngx_str_value value;
		u_char *lowcase_key;
	} ngx_table_elt_t
	用于存储HTTP头， key存储头部名称， value存储对应值， lowcase_key 主要处理忽略大小写。

ngx_buf_t数据结构
	ngx_buf_t 用于处理大数据的关键数据结构，



